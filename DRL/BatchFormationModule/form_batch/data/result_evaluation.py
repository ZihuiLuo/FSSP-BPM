import numpy as np
import csv
import pandas as pd
from VRP.vrp_utils import reward_func
import tensorflow as tf


def seem_equal(a, b):
    return sum(abs(a - b)) < 1e-5


def path2load(file, path):
    load = []
    sum = 0
    input_dim = len(path[0])
    for row in path:
        if seem_equal(row, input_dim * [0.]):
            load.append(f'Group total give {sum}')
            sum = 0
            continue
        for file_row in file:
            if seem_equal(row, file_row[:input_dim]):
                remain_load = 50 - sum
                if file_row[input_dim] > remain_load:
                    load.append(f'Decompose {file_row[input_dim]}, Give {remain_load}')
                    file_row[input_dim] -= remain_load
                    sum += remain_load
                else:
                    sum += file_row[input_dim]
                    load.append(f'{file_row[input_dim]} all give')
                    file_row[input_dim] = 0
                break
    return load


def path2csv(path, load, filename):
    columns = ['DEL_TO_DATE', 'ORD_WID', 'ORD_THK', 'priority']
    df = pd.DataFrame(path, columns=columns)
    # 反正规化
    without_norm = pd.read_csv("A_test_without_norm.csv")
    norm_inverse = lambda x, low, high: (x * (high - low) + low)
    low = {name: without_norm[name].min() for name in columns[:4]}
    high = {name: without_norm[name].max() for name in columns[:4]}
    df = {name: norm_inverse(df[name], low[name], high[name]) for name in columns[:4]}
    # 找出那些0000的行
    df['load'] = map(lambda str: str.startswith('Group'), load)
    df = pd.DataFrame(df)
    # 赋值为0000
    df[df['load']] = 0
    df['load'] = load
    df.to_csv(filename)

def path2csv_norm(path, load):
    columns = ['DEL_TO_DATE', 'ORD_WID', 'ORD_THK', 'priority']
    df = pd.DataFrame(path, columns=columns)
    df = {name: df[name] for name in columns[:4]}
    df['load'] = load
    pd.DataFrame(df).to_csv("result.csv")

def print_reward(path):
    sess = tf.Session()
    print(sess.run(reward_func(tf.expand_dims(path, axis=1))))

if __name__=='__main__':
    reader = csv.reader(open("test.txt", 'r'))
    file = [list(map(float, row[0].strip().split('\t'))) for _, row in enumerate(reader)]
    file = np.array(file)
    path = [[0.74756736, 0.35688767, 0.7058824, 0.0], [0.9825976, 1.0, 0.20588236, 0.25], [0.9799015, 0.7340214, 0.23529412, 0.25], [0.9755141, 0.6863835, 0.29411766, 0.5], [0.9975735, 0.55934894, 0.11764706, 0.5], [0.9799015, 0.4561334, 0.13235295, 0.5], [0.9801466, 0.38864627, 0.1764706, 0.5], [0.9926714, 0.2576419, 0.029411765, 0.5], [1.0, 0.1464867, 0.05882353, 0.5], [0.97499937, 0.15839618, 0.0882353, 0.5], [0.9776955, 0.13854705, 0.1764706, 0.5], [0.99002427, 0.0, 0.14705883, 0.25], [0.7446016, 0.82929736, 0.14705883, 0.25], [0.74974877, 0.7776896, 0.1764706, 0.25], [0.73278755, 0.674474, 0.0, 0.5], [0.0, 0.0, 0.0, 0.0], [0.9926714, 0.13854705, 0.38235295, 0.75], [0.73041004, 0.39658594, 1.0, 0.75], [0.0, 0.0, 0.0, 0.0], [0.7451163, 0.35688767, 0.0, 0.5], [0.74264073, 0.35688767, 0.7058824, 0.25], [0.73712593, 0.19809449, 0.11764706, 0.5], [0.7524694, 0.19809449, 0.23529412, 1.0], [0.50488985, 0.0789996, 0.05882353, 1.0], [0.48770803, 0.6546249, 0.38235295, 0.5], [0.0, 0.0, 0.0, 0.0], [0.5000123, 0.674474, 0.36764705, 0.5], [0.5043996, 0.39658594, 0.11764706, 0.5], [0.5122675, 0.35688767, 0.13235295, 0.5], [0.4902081, 0.34100834, 0.1764706, 0.5], [0.48770803, 0.37276697, 0.1764706, 0.5], [0.5116302, 0.27749106, 0.11764706, 0.75], [0.0, 0.0, 0.0, 0.0], [0.5097919, 0.27749106, 0.3529412, 0.75], [0.5122675, 0.19809449, 0.05882353, 0.75], [0.49263462, 0.27749106, 0.42647058, 0.5], [0.5073654, 0.15839618, 0.05882353, 0.5], [0.50488985, 0.19809449, 0.64705884, 0.25], [0.0, 0.0, 0.0, 0.0], [0.2548837, 0.8054784, 0.19117647, 0.5], [0.26677126, 0.674474, 0.13235295, 0.5], [0.24257948, 0.7340214, 0.029411765, 0.5], [0.26652613, 0.6149266, 0.0882353, 0.5], [0.26211426, 0.674474, 0.2647059, 0.5], [0.2548837, 0.5791981, 0.4117647, 0.5], [0.2548837, 0.52759033, 0.3970588, 0.5], [0.24981004, 0.43628424, 0.2647059, 0.5], [0.26226133, 0.47598255, 0.1764706, 0.0], [0.0, 0.0, 0.0, 0.0], [0.26456532, 0.27749106, 0.029411765, 0.5], [0.26226133, 0.28543073, 0.1764706, 0.5], [0.24226084, 0.33703852, 0.2647059, 0.5], [0.24949141, 0.27749106, 0.16176471, 0.5], [0.004902081, 0.5553791, 0.2647059, 0.5], [0.019216157, 0.47598255, 0.27941176, 0.5], [0.0, 0.27749106, 0.3529412, 1.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]


    path = np.array(path,dtype=np.float32)
    path2csv(path, path2load(file, path), 'VRP_result.csv')
    print_reward(path)